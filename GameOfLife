import java.util.Scanner;

public class GameOfLife {

    public static Scanner sc = new Scanner(System.in);
    
    static final int MATRIX_DIM = 9;
    static boolean isEmpty;
    
    
// a 8 szomszed teszteléséhez 8 relatív koordináta
    static int[][] vectors = {{-1, -1}, {-1, 0}, {-1, 1},
                              {0, -1}, {0, 1},
                              {1, -1}, {1, 0}, {1, 1}
                             };

// ÁLLAPOTOK: -1 keret,  0 nincs,   1 van
    static int[][] matrix = {{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                 {-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 - 1},
    {-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 - 1},
    {-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 - 1},
    {-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 - 1},
    {-1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0 - 1},
    {-1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 - 1},
    {-1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 - 1},
    {-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 - 1},
    {-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 - 1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}

    };

// ez a maszk a következő állapot kiszámításához . . . +2 a keret miatt kell
    static boolean [][] mask = new boolean[MATRIX_DIM + 2][MATRIX_DIM + 2];

// a változtatások beleírása a matrix-ba és a kiíratás egy eljárásban   
    static void applyAndShow (int[][] currMatrix, boolean[][] mask){
        
        for (int y = 1; y < currMatrix.length - 1; y++) {
            for (int x = 1; x < currMatrix[1].length - 1; x++) {   
                
                int result = (mask[y][x]) ? 1: 0;
                currMatrix[y][x] = result;
                
                switch(result){
                    case 0:
                        System.out.print("  "); break;
                    case 1:
                        System.out.print("()"); break; 
                }
            }
            System.out.println("");
        }
        
    }
    

/*
Végigpásztázza a mátrixot (Y X) . . . 
int z=0 for ciklus arra van, hogy megszámlálja a szomszédokat
ugyanitt vizsgálom, hogy üres-e a matrix (isEmpty)

    Fontos: a 0. és utolsó indexet nem vizsgálom, az a keret
    */
    static void validateMatrix(int[][] matrix, boolean[][] mask) {
        
        isEmpty = true;
        for (int y = 1; y < matrix.length - 1; y++) {
            for (int x = 1; x < matrix[1].length - 1; x++) {
                
                int adjacent = 0;
                int current  = matrix[y][x];
                if (current>0) isEmpty = false;
                
                for (int z = 0; z < vectors.length; z++) {
                    int yVec = vectors[z][0] + y;
                    int xVec = vectors[z][1] + x;
                    if (matrix[yVec][xVec] > 0) {
                        ++adjacent;
                    }
                }
                switch(current){
                    case 0: 
                        mask[y][x] = (adjacent==3); break;
                    case 1:
                        mask[y][x] = (adjacent==2 | adjacent==3); break;
                    
                }
            }
        }
    }

    public static void main(String[] args) {

        System.out.println("ÉLetjáték\nNYOMJ ENTER-T A TOVÁBBLÉPÉSHEZ ");
        int count =0;
        do{
        validateMatrix(matrix, mask);
        System.out.println("PHASE: " + (count++));
        applyAndShow(matrix, mask);
        sc.nextLine();
        }while (!isEmpty);
    }
}
