import java.util.LinkedList;

public class RoboSnake {

    static final char BLOCK = 'X';
    static final char FOOD = '*';
    static final char HEAD = 'O';
    static final char BLANK = ' ';

    static final int DELAY_MILLISEC = 500;
    static final int BOARD_DIM_Y = 20;
    static final int BOARD_DIM_X = 40;
    static final int START_POS_Y = 3;
    static final int START_POS_X = 3;
    static final int NUM_OF_FOOD = BOARD_DIM_X * BOARD_DIM_Y / 5;

    // ezekkel az utasításokkal irányítod a kígyót:  IRÁNY -- HÁNYAT LÉPJEN
    static String[][] COMMANDS = {
        {"Jobbkezdo", "2"}, {"le", "3"}, {"Jobb", "5"}, {"fel", "2"}, {"Jobb", "5"},
        {"le", "5"}, {"bal", "3"}, {"fel", "1"}, {"bal", "2"}, {"le", "5"},
        {"bal", "5"}, {"fel", "10"}, {"jobb", "20"}
    };

    static int cmdIndex = 0;
    static int cmdCountDown = 0;

    static char[][] board = new char[BOARD_DIM_Y][BOARD_DIM_X];

    
    static void initBoard() {

        for (int y = 0; y < BOARD_DIM_Y; y++) {
            for (int x = 0; x < BOARD_DIM_X; x++) {
                board[y][x] = (y == 0 | y == BOARD_DIM_Y - 1
                        | x == 0 | x == BOARD_DIM_X - 1) ? BLOCK : ' ';

            }
        }
    }

    static void placeFood() {
        int num = NUM_OF_FOOD;
        while (num != 0) {
            int y = (int) (Math.random() * BOARD_DIM_Y);
            int x = (int) (Math.random() * BOARD_DIM_X);
            if (board[y][x] != BLOCK) {
                --num;
                board[y][x] = FOOD;
            }
        }

    }

// először kirajzol 5 egység kígyót jobbra , start pozició 3:3
    static void initSnk(LinkedList snkBody, Integer[] snkHead) {

        for (int i = 0; i < 5; i++) {
            Integer[] bodyPart = { START_POS_Y, START_POS_X+i};
            snkBody.add(bodyPart);
            board[bodyPart[0]][bodyPart[1]] = BLOCK;
            snkHead[1]++;
        }
    }

    static boolean checkCollision(Integer[] snkHead) {

        return (board[snkHead[0]][snkHead[1]] == BLOCK);

    }

    static boolean checkFood(Integer[] snkHead) {

        return (board[snkHead[0]][snkHead[1]] == FOOD);
    }

    static String getCommand() {

        String currComm = COMMANDS[cmdIndex][0];
        if (cmdCountDown <= 0 ) {
            ++cmdIndex;
            if ( !(cmdIndex < COMMANDS.length - 1)) cmdIndex = 0;
            cmdCountDown = Integer.parseInt(COMMANDS[cmdIndex][1]);
        }
        --cmdCountDown;
        return currComm;
    }

    static void moveSnk(LinkedList snkBody, Integer[] snkHead) {

        Integer[] bodyPart = { snkHead[0], snkHead[1]};
        snkBody.add(bodyPart);
        board[bodyPart[0]][bodyPart[1]] = BLOCK;

        String currComm = getCommand().toUpperCase();
        char cmd = currComm.charAt(0);

        switch (cmd) {
            case 'B':
                --snkHead[1];
                break;
            case 'J':
                ++snkHead[1];
                break;
            case 'F':
                --snkHead[0];
                break;
            case 'L':
                ++snkHead[0];
                break;
        }

    }

    static void drawBoard(LinkedList snkBody, Integer[] snkHead, boolean gotFood, int score) {

        System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u001B[47m");
        if (!gotFood) {
            Integer[] bodyPart = (Integer[]) snkBody.removeFirst();
            System.out.println(bodyPart[0] + "..." + bodyPart[1]);
            board[bodyPart[0]][bodyPart[1]] = ' ';
        }
        board[snkHead[0]][snkHead[1]] = HEAD;

        System.out.println("snkBody size: " + snkBody.size());
        for (int y = 0; y < BOARD_DIM_Y; y++) {
                String str = "";
            for (int x = 0; x < BOARD_DIM_X; x++) {
                char tmp = board[y][x];
              
                switch(tmp){
                    case ' ':
                        str += "\u001B[47m\u001B[30m "; break;
                    case 'X':
                        str += "\u001B[45m\u001B[37mX"; break;                        
                    case '*':
                        str += "\u001B[47m\u001B[30m*"; break;                     
                    case 'O':
                        str += "\u001B[44m\u001B[33mO"; break;    
                        
                }
            }
            System.out.print(str + "\n");
        }
    }

    static void addDelay() {
        try {
            Thread.sleep(DELAY_MILLISEC);
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

    }

    ;


public static void main(String[] args) {

    LinkedList<Integer[]> snkBody = new LinkedList<>();
    Integer[] snkHead = {START_POS_Y, START_POS_X};
    
    initBoard();
        initSnk(snkBody, snkHead);
        placeFood();
        
        boolean gameOver;
        int pontok = 0;
        do {
            moveSnk(snkBody, snkHead);
            gameOver = checkCollision(snkHead);
            boolean gotFood = checkFood(snkHead);
            if (gotFood) ++pontok;
            drawBoard(snkBody, snkHead, gotFood, pontok);
            addDelay();
        } while (!gameOver);
    }

}
